// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PasswordManager.DAL.EFCore;

namespace PasswordManager.DAL.EFCore.Migrations
{
    [DbContext(typeof(PasswordManagerDbContext))]
    [Migration("20220412165540_initial_@")]
    partial class initial_
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PasswordDbId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PasswordDbId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PasswordDbId")
                        .HasColumnType("integer");

                    b.Property<string>("PathToIcon")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("PasswordDbId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.PasswordDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MasterPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PathToIcon")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("PasswordDb");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.Entry", b =>
                {
                    b.HasOne("PasswordManager.DAL.EFCore.Entities.Group", "Group")
                        .WithMany("Entries")
                        .HasForeignKey("GroupId");

                    b.HasOne("PasswordManager.DAL.EFCore.Entities.PasswordDb", "PasswordDb")
                        .WithMany("EntriesWithoutGroup")
                        .HasForeignKey("PasswordDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PasswordDb");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.Group", b =>
                {
                    b.HasOne("PasswordManager.DAL.EFCore.Entities.PasswordDb", "PasswordDb")
                        .WithMany("Groups")
                        .HasForeignKey("PasswordDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordDb");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.Group", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("PasswordManager.DAL.EFCore.Entities.PasswordDb", b =>
                {
                    b.Navigation("EntriesWithoutGroup");

                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
